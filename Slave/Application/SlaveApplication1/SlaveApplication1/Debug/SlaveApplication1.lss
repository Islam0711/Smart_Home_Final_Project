
SlaveApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a86  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000b6  00000000  00000000  00000ab5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002013  00000000  00000000  00000cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000820  00000000  00000000  00002cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a90  00000000  00000000  000034ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00003f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027b  00000000  00000000  000041c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ca  00000000  00000000  0000443b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00004d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000009a2  000009a2  00000a76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ADC_vinit 00000020  000008b4  000008b4  00000988  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ADC_u16Read 0000001e  000008d4  000008d4  000009a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_vsetPINDir 000000e0  000003fc  000003fc  000004d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DIO_write 000000e0  000004dc  000004dc  000005b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.DIO_u8read 000000ba  00000690  00000690  00000764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LED_vInit 00000008  00000976  00000976  00000a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LED_vTurnOn 00000008  0000097e  0000097e  00000a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LED_vTurnOff 00000008  00000986  00000986  00000a5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LED_u8ReadStatus 00000006  00000996  00000996  00000a6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    000001da  0000011a  0000011a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_10 00000108  000002f4  000002f4  000003c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .bss.last_air_conditioning_value 00000001  00800064  00800064  00000a86  2**0
                  ALLOC
 26 .bss.counter  00000001  00800065  00800065  00000a86  2**0
                  ALLOC
 27 .bss.temp_sensor_reading 00000002  00800060  00800060  00000a86  2**0
                  ALLOC
 28 .data.required_temperature 00000002  00800062  000009b0  00000a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 29 .text.SPI_vInitSlave 0000000e  0000091c  0000091c  000009f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.SPI_ui8TransmitRecive 0000000a  0000096c  0000096c  00000a40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.timer0_initializeCTC 0000002c  00000866  00000866  0000093a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.timer0_stop 00000014  00000908  00000908  000009dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text         0000005e  000007c4  000007c4  00000898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text         0000007a  0000074a  0000074a  0000081e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text         0000000c  00000954  00000954  00000a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text         00000006  0000099c  0000099c  00000a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text         0000000e  0000092a  0000092a  000009fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text         0000000e  00000938  00000938  00000a0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         00000022  00000892  00000892  00000966  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         00000044  00000822  00000822  000008f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         0000000e  00000946  00000946  00000a1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         00000008  0000098e  0000098e  00000a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         000000d4  000005bc  000005bc  00000690  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.libgcc  0000000c  00000960  00000960  00000a34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__dummy_fini 00000002  000009aa  000009aa  00000a7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__dummy_funcs_on_exit 00000002  000009ac  000009ac  00000a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__dummy_simulator_exit 00000002  000009ae  000009ae  00000a82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.exit    00000016  000008f2  000008f2  000009c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text._Exit   00000004  000009a6  000009a6  00000a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
   4:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
   8:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
   c:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  10:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  14:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  18:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  1c:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  20:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  24:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  28:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_10>
  2c:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  30:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  34:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  38:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  3c:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  40:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  44:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  48:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  4c:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  50:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__bad_interrupt>
  54:	b9 00       	.word	0x00b9	; ????
  56:	cd 00       	.word	0x00cd	; ????
  58:	e1 00       	.word	0x00e1	; ????
  5a:	f5 00       	.word	0x00f5	; ????
  5c:	1d 01       	movw	r2, r26
  5e:	09 01       	movw	r0, r18
  60:	ac 00       	.word	0x00ac	; ????
  62:	ac 00       	.word	0x00ac	; ????
  64:	ac 00       	.word	0x00ac	; ????
  66:	ac 00       	.word	0x00ac	; ????
  68:	ac 00       	.word	0x00ac	; ????
  6a:	ac 00       	.word	0x00ac	; ????
  6c:	ac 00       	.word	0x00ac	; ????
  6e:	ac 00       	.word	0x00ac	; ????
  70:	ac 00       	.word	0x00ac	; ????
  72:	ac 00       	.word	0x00ac	; ????
  74:	31 01       	movw	r6, r2
  76:	36 01       	movw	r6, r12
  78:	3b 01       	movw	r6, r22
  7a:	40 01       	movw	r8, r0
  7c:	4c 01       	movw	r8, r24
  7e:	45 01       	movw	r8, r10
  80:	ac 00       	.word	0x00ac	; ????
  82:	ac 00       	.word	0x00ac	; ????
  84:	ac 00       	.word	0x00ac	; ????
  86:	ac 00       	.word	0x00ac	; ????
  88:	ac 00       	.word	0x00ac	; ????
  8a:	ac 00       	.word	0x00ac	; ????
  8c:	ac 00       	.word	0x00ac	; ????
  8e:	ac 00       	.word	0x00ac	; ????
  90:	ac 00       	.word	0x00ac	; ????
  92:	ac 00       	.word	0x00ac	; ????
  94:	51 01       	movw	r10, r2
  96:	56 01       	movw	r10, r12
  98:	5b 01       	movw	r10, r22
  9a:	60 01       	movw	r12, r0
  9c:	6c 01       	movw	r12, r24
  9e:	65 01       	movw	r12, r10
  a0:	ac 00       	.word	0x00ac	; ????
  a2:	ac 00       	.word	0x00ac	; ????
  a4:	ac 00       	.word	0x00ac	; ????
  a6:	ac 00       	.word	0x00ac	; ????
  a8:	ac 00       	.word	0x00ac	; ????
  aa:	ac 00       	.word	0x00ac	; ????
  ac:	ac 00       	.word	0x00ac	; ????
  ae:	ac 00       	.word	0x00ac	; ????
  b0:	ac 00       	.word	0x00ac	; ????
  b2:	71 01       	movw	r14, r2

000000b4 <.dinit>:
  b4:	00 60       	ori	r16, 0x00	; 0
  b6:	00 62       	ori	r16, 0x20	; 32
  b8:	80 00       	.word	0x0080	; ????
  ba:	62 00       	.word	0x0062	; ????
  bc:	64 00       	.word	0x0064	; ????
  be:	09 b0       	in	r0, 0x09	; 9
  c0:	00 64       	ori	r16, 0x40	; 64
  c2:	00 66       	ori	r16, 0x60	; 96
  c4:	80 00       	.word	0x0080	; ????

000000c6 <__ctors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf e5       	ldi	r28, 0x5F	; 95
  cc:	d8 e0       	ldi	r29, 0x08	; 8
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
  d2:	e4 eb       	ldi	r30, 0xB4	; 180
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__do_clear_bss+0x8>
  da:	b5 91       	lpm	r27, Z+
  dc:	a5 91       	lpm	r26, Z+
  de:	35 91       	lpm	r19, Z+
  e0:	25 91       	lpm	r18, Z+
  e2:	05 91       	lpm	r16, Z+
  e4:	07 fd       	sbrc	r16, 7
  e6:	0c c0       	rjmp	.+24     	; 0x100 <__do_clear_bss>
  e8:	95 91       	lpm	r25, Z+
  ea:	85 91       	lpm	r24, Z+
  ec:	ef 01       	movw	r28, r30
  ee:	f9 2f       	mov	r31, r25
  f0:	e8 2f       	mov	r30, r24
  f2:	05 90       	lpm	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	a2 17       	cp	r26, r18
  f8:	b3 07       	cpc	r27, r19
  fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0x20>
  fc:	fe 01       	movw	r30, r28
  fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_clear_bss+0x8>

00000100 <__do_clear_bss>:
 100:	1d 92       	st	X+, r1
 102:	a2 17       	cp	r26, r18
 104:	b3 07       	cpc	r27, r19
 106:	e1 f7       	brne	.-8      	; 0x100 <__do_clear_bss>
 108:	e5 3c       	cpi	r30, 0xC5	; 197
 10a:	f4 07       	cpc	r31, r20
 10c:	31 f7       	brne	.-52     	; 0xda <__do_copy_data+0x8>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <_etext>
 112:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <exit>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>

Disassembly of section .text:

000009a2 <__bad_interrupt>:
 9a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.ADC_vinit:

000008b4 <ADC_vinit>:
#include "std_macros.h"
#include "STD_Types.h"
void ADC_vinit(void)
{
	//configure VREF to the internal voltage(2.56 V)
	SET_BIT(ADMUX,REFS0);
 8b4:	87 b1       	in	r24, 0x07	; 7
 8b6:	80 64       	ori	r24, 0x40	; 64
 8b8:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADMUX,REFS1);
 8ba:	87 b1       	in	r24, 0x07	; 7
 8bc:	80 68       	ori	r24, 0x80	; 128
 8be:	87 b9       	out	0x07, r24	; 7
	
	SET_BIT(ADCSRA,ADEN); // ENable ADC
 8c0:	86 b1       	in	r24, 0x06	; 6
 8c2:	80 68       	ori	r24, 0x80	; 128
 8c4:	86 b9       	out	0x06, r24	; 6
	
	//adjust ADC clock by select the division factor-64
	SET_BIT(ADCSRA,ADPS2);
 8c6:	86 b1       	in	r24, 0x06	; 6
 8c8:	84 60       	ori	r24, 0x04	; 4
 8ca:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
 8cc:	86 b1       	in	r24, 0x06	; 6
 8ce:	82 60       	ori	r24, 0x02	; 2
 8d0:	86 b9       	out	0x06, r24	; 6
 8d2:	08 95       	ret

Disassembly of section .text.ADC_u16Read:

000008d4 <ADC_u16Read>:
	
}
uint16 ADC_u16Read(void)
{
	uint16 read_val; // which contain the converted value which will be returned
	SET_BIT(ADCSRA,ADSC); // start the ADC conversion
 8d4:	86 b1       	in	r24, 0x06	; 6
 8d6:	80 64       	ori	r24, 0x40	; 64
 8d8:	86 b9       	out	0x06, r24	; 6
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1 when conversion complete
 8da:	34 9b       	sbis	0x06, 4	; 6
 8dc:	fe cf       	rjmp	.-4      	; 0x8da <ADC_u16Read+0x6>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
 8de:	86 b1       	in	r24, 0x06	; 6
 8e0:	80 61       	ori	r24, 0x10	; 16
 8e2:	86 b9       	out	0x06, r24	; 6
	read_val=(ADCL); //reas the ADCL register
 8e4:	24 b1       	in	r18, 0x04	; 4
	read_val|=(ADCH<<8);//read the whole register
 8e6:	85 b1       	in	r24, 0x05	; 5
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	98 2f       	mov	r25, r24
 8ec:	88 27       	eor	r24, r24
	return read_val ; // return the converted value
 8ee:	82 2b       	or	r24, r18
 8f0:	08 95       	ret

Disassembly of section .text.DIO_vsetPINDir:

000003fc <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
	switch(portname)
 3fc:	82 34       	cpi	r24, 0x42	; 66
 3fe:	19 f1       	breq	.+70     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 400:	18 f4       	brcc	.+6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 402:	81 34       	cpi	r24, 0x41	; 65
 404:	39 f0       	breq	.+14     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 406:	08 95       	ret
 408:	83 34       	cpi	r24, 0x43	; 67
 40a:	b1 f1       	breq	.+108    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 40c:	84 34       	cpi	r24, 0x44	; 68
 40e:	09 f4       	brne	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	4c c0       	rjmp	.+152    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 412:	08 95       	ret
	{
		
		
		case 'A':
		if(direction==1)
 414:	41 30       	cpi	r20, 0x01	; 1
 416:	59 f4       	brne	.+22     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 418:	2a b3       	in	r18, 0x1a	; 26
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	82 2b       	or	r24, r18
 42a:	8a bb       	out	0x1a, r24	; 26
 42c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 42e:	2a b3       	in	r18, 0x1a	; 26
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	80 95       	com	r24
 440:	82 23       	and	r24, r18
 442:	8a bb       	out	0x1a, r24	; 26
 444:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 446:	41 30       	cpi	r20, 0x01	; 1
 448:	59 f4       	brne	.+22     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 44a:	27 b3       	in	r18, 0x17	; 23
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	82 2b       	or	r24, r18
 45c:	87 bb       	out	0x17, r24	; 23
 45e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 460:	27 b3       	in	r18, 0x17	; 23
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 470:	80 95       	com	r24
 472:	82 23       	and	r24, r18
 474:	87 bb       	out	0x17, r24	; 23
 476:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 478:	41 30       	cpi	r20, 0x01	; 1
 47a:	59 f4       	brne	.+22     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 47c:	24 b3       	in	r18, 0x14	; 20
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 48c:	82 2b       	or	r24, r18
 48e:	84 bb       	out	0x14, r24	; 20
 490:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 492:	24 b3       	in	r18, 0x14	; 20
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	80 95       	com	r24
 4a4:	82 23       	and	r24, r18
 4a6:	84 bb       	out	0x14, r24	; 20
 4a8:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 4aa:	41 30       	cpi	r20, 0x01	; 1
 4ac:	59 f4       	brne	.+22     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 4ae:	21 b3       	in	r18, 0x11	; 17
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4be:	82 2b       	or	r24, r18
 4c0:	81 bb       	out	0x11, r24	; 17
 4c2:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 4c4:	21 b3       	in	r18, 0x11	; 17
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4d4:	80 95       	com	r24
 4d6:	82 23       	and	r24, r18
 4d8:	81 bb       	out	0x11, r24	; 17
 4da:	08 95       	ret

Disassembly of section .text.DIO_write:

000004dc <DIO_write>:
}


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
	switch(portname)
 4dc:	82 34       	cpi	r24, 0x42	; 66
 4de:	19 f1       	breq	.+70     	; 0x526 <DIO_write+0x4a>
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <DIO_write+0xc>
 4e2:	81 34       	cpi	r24, 0x41	; 65
 4e4:	39 f0       	breq	.+14     	; 0x4f4 <DIO_write+0x18>
 4e6:	08 95       	ret
 4e8:	83 34       	cpi	r24, 0x43	; 67
 4ea:	b1 f1       	breq	.+108    	; 0x558 <DIO_write+0x7c>
 4ec:	84 34       	cpi	r24, 0x44	; 68
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <DIO_write+0x16>
 4f0:	4c c0       	rjmp	.+152    	; 0x58a <DIO_write+0xae>
 4f2:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
 4f4:	41 30       	cpi	r20, 0x01	; 1
 4f6:	59 f4       	brne	.+22     	; 0x50e <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 4f8:	2b b3       	in	r18, 0x1b	; 27
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_write+0x28>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_write+0x24>
 508:	82 2b       	or	r24, r18
 50a:	8b bb       	out	0x1b, r24	; 27
 50c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 50e:	2b b3       	in	r18, 0x1b	; 27
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_write+0x3e>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_write+0x3a>
 51e:	80 95       	com	r24
 520:	82 23       	and	r24, r18
 522:	8b bb       	out	0x1b, r24	; 27
 524:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 526:	41 30       	cpi	r20, 0x01	; 1
 528:	59 f4       	brne	.+22     	; 0x540 <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 52a:	28 b3       	in	r18, 0x18	; 24
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_write+0x5a>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_write+0x56>
 53a:	82 2b       	or	r24, r18
 53c:	88 bb       	out	0x18, r24	; 24
 53e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 540:	28 b3       	in	r18, 0x18	; 24
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_write+0x70>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_write+0x6c>
 550:	80 95       	com	r24
 552:	82 23       	and	r24, r18
 554:	88 bb       	out	0x18, r24	; 24
 556:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 558:	41 30       	cpi	r20, 0x01	; 1
 55a:	59 f4       	brne	.+22     	; 0x572 <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 55c:	25 b3       	in	r18, 0x15	; 21
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_write+0x8c>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	6a 95       	dec	r22
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_write+0x88>
 56c:	82 2b       	or	r24, r18
 56e:	85 bb       	out	0x15, r24	; 21
 570:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 572:	25 b3       	in	r18, 0x15	; 21
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_write+0xa2>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_write+0x9e>
 582:	80 95       	com	r24
 584:	82 23       	and	r24, r18
 586:	85 bb       	out	0x15, r24	; 21
 588:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 58a:	41 30       	cpi	r20, 0x01	; 1
 58c:	59 f4       	brne	.+22     	; 0x5a4 <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 58e:	22 b3       	in	r18, 0x12	; 18
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_write+0xbe>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_write+0xba>
 59e:	82 2b       	or	r24, r18
 5a0:	82 bb       	out	0x12, r24	; 18
 5a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 5a4:	22 b3       	in	r18, 0x12	; 18
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_write+0xd4>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_write+0xd0>
 5b4:	80 95       	com	r24
 5b6:	82 23       	and	r24, r18
 5b8:	82 bb       	out	0x12, r24	; 18
 5ba:	08 95       	ret

Disassembly of section .text.DIO_u8read:

00000690 <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
	switch(portname)
 690:	82 34       	cpi	r24, 0x42	; 66
 692:	e9 f0       	breq	.+58     	; 0x6ce <DIO_u8read+0x3e>
 694:	18 f4       	brcc	.+6      	; 0x69c <DIO_u8read+0xc>
 696:	81 34       	cpi	r24, 0x41	; 65
 698:	31 f0       	breq	.+12     	; 0x6a6 <DIO_u8read+0x16>
 69a:	55 c0       	rjmp	.+170    	; 0x746 <DIO_u8read+0xb6>
 69c:	83 34       	cpi	r24, 0x43	; 67
 69e:	59 f1       	breq	.+86     	; 0x6f6 <DIO_u8read+0x66>
 6a0:	84 34       	cpi	r24, 0x44	; 68
 6a2:	e9 f1       	breq	.+122    	; 0x71e <DIO_u8read+0x8e>
 6a4:	50 c0       	rjmp	.+160    	; 0x746 <DIO_u8read+0xb6>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
 6a6:	49 b3       	in	r20, 0x19	; 25
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	9c 01       	movw	r18, r24
 6ae:	06 2e       	mov	r0, r22
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_u8read+0x26>
 6b2:	22 0f       	add	r18, r18
 6b4:	33 1f       	adc	r19, r19
 6b6:	0a 94       	dec	r0
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_u8read+0x22>
 6ba:	84 2f       	mov	r24, r20
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	82 23       	and	r24, r18
 6c0:	93 23       	and	r25, r19
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_u8read+0x38>
 6c4:	95 95       	asr	r25
 6c6:	87 95       	ror	r24
 6c8:	6a 95       	dec	r22
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_u8read+0x34>
		break;
 6cc:	08 95       	ret
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
 6ce:	46 b3       	in	r20, 0x16	; 22
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	9c 01       	movw	r18, r24
 6d6:	06 2e       	mov	r0, r22
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_u8read+0x4e>
 6da:	22 0f       	add	r18, r18
 6dc:	33 1f       	adc	r19, r19
 6de:	0a 94       	dec	r0
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_u8read+0x4a>
 6e2:	84 2f       	mov	r24, r20
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	82 23       	and	r24, r18
 6e8:	93 23       	and	r25, r19
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_u8read+0x60>
 6ec:	95 95       	asr	r25
 6ee:	87 95       	ror	r24
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_u8read+0x5c>
		break;
 6f4:	08 95       	ret
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
 6f6:	43 b3       	in	r20, 0x13	; 19
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	9c 01       	movw	r18, r24
 6fe:	06 2e       	mov	r0, r22
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_u8read+0x76>
 702:	22 0f       	add	r18, r18
 704:	33 1f       	adc	r19, r19
 706:	0a 94       	dec	r0
 708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_u8read+0x72>
 70a:	84 2f       	mov	r24, r20
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	82 23       	and	r24, r18
 710:	93 23       	and	r25, r19
 712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_u8read+0x88>
 714:	95 95       	asr	r25
 716:	87 95       	ror	r24
 718:	6a 95       	dec	r22
 71a:	e2 f7       	brpl	.-8      	; 0x714 <DIO_u8read+0x84>
		break;
 71c:	08 95       	ret
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
 71e:	40 b3       	in	r20, 0x10	; 16
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	9c 01       	movw	r18, r24
 726:	06 2e       	mov	r0, r22
 728:	02 c0       	rjmp	.+4      	; 0x72e <DIO_u8read+0x9e>
 72a:	22 0f       	add	r18, r18
 72c:	33 1f       	adc	r19, r19
 72e:	0a 94       	dec	r0
 730:	e2 f7       	brpl	.-8      	; 0x72a <DIO_u8read+0x9a>
 732:	84 2f       	mov	r24, r20
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	82 23       	and	r24, r18
 738:	93 23       	and	r25, r19
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_u8read+0xb0>
 73c:	95 95       	asr	r25
 73e:	87 95       	ror	r24
 740:	6a 95       	dec	r22
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_u8read+0xac>
		break;
 744:	08 95       	ret
}


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
 746:	80 e0       	ldi	r24, 0x00	; 0
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
		break;
		default: break;
	}
	return return_value ;
}
 748:	08 95       	ret

Disassembly of section .text.LED_vInit:

00000976 <LED_vInit>:
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
}
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 976:	41 e0       	ldi	r20, 0x01	; 1
 978:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_vsetPINDir>
 97c:	08 95       	ret

Disassembly of section .text.LED_vTurnOn:

0000097e <LED_vTurnOn>:
 97e:	41 e0       	ldi	r20, 0x01	; 1
 980:	0e 94 6e 02 	call	0x4dc	; 0x4dc <DIO_write>
 984:	08 95       	ret

Disassembly of section .text.LED_vTurnOff:

00000986 <LED_vTurnOff>:
 986:	40 e0       	ldi	r20, 0x00	; 0
 988:	0e 94 6e 02 	call	0x4dc	; 0x4dc <DIO_write>
 98c:	08 95       	ret

Disassembly of section .text.LED_u8ReadStatus:

00000996 <LED_u8ReadStatus>:
}
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
 996:	0e 94 48 03 	call	0x690	; 0x690 <DIO_u8read>
}
 99a:	08 95       	ret

Disassembly of section .text.main:

0000011a <main>:
volatile uint8 counter=0; // the counter which determine the periodic time of implementing ISR
volatile uint8 last_air_conditioning_value=AIR_CONDTIONING_OFF; // last air conditioning value which will help in hysteresis

int main(void)
{
	ADC_vinit();//initialize the ADC of the microcontroller
 11a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <ADC_vinit>
	timer0_initializeCTC();//Initialize the timer zero of the microcontroller
 11e:	0e 94 33 04 	call	0x866	; 0x866 <timer0_initializeCTC>
	SPI_vInitSlave();//initialize the SPI as a slave
 122:	0e 94 8e 04 	call	0x91c	; 0x91c <SPI_vInitSlave>

	//initialization of output pins of connected leds or devices
	LED_vInit(AIR_COND_PORT,AIR_COND_PIN);
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	84 e4       	ldi	r24, 0x44	; 68
 12a:	0e 94 bb 04 	call	0x976	; 0x976 <LED_vInit>
	LED_vInit(TV_PORT,TV_PIN);
 12e:	63 e0       	ldi	r22, 0x03	; 3
 130:	84 e4       	ldi	r24, 0x44	; 68
 132:	0e 94 bb 04 	call	0x976	; 0x976 <LED_vInit>
	LED_vInit(ROOM1_PORT,ROOM1_PIN);
 136:	64 e0       	ldi	r22, 0x04	; 4
 138:	84 e4       	ldi	r24, 0x44	; 68
 13a:	0e 94 bb 04 	call	0x976	; 0x976 <LED_vInit>
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
 13e:	65 e0       	ldi	r22, 0x05	; 5
 140:	84 e4       	ldi	r24, 0x44	; 68
 142:	0e 94 bb 04 	call	0x976	; 0x976 <LED_vInit>
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
 146:	66 e0       	ldi	r22, 0x06	; 6
 148:	84 e4       	ldi	r24, 0x44	; 68
 14a:	0e 94 bb 04 	call	0x976	; 0x976 <LED_vInit>
	LED_vInit(ROOM4_PORT,ROOM4_PIN);
 14e:	67 e0       	ldi	r22, 0x07	; 7
 150:	84 e4       	ldi	r24, 0x44	; 68
 152:	0e 94 bb 04 	call	0x976	; 0x976 <LED_vInit>
	
	uint8 request = DEFAULT_ACK;//the value that is received from the master
	uint8 response = DEFAULT_ACK;//the values that is sent back to the master
 156:	cf ef       	ldi	r28, 0xFF	; 255
	
	while(1)
	{
		request = SPI_ui8TransmitRecive(DEFAULT_ACK);//wait for the master to start the transmitting
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	0e 94 b6 04 	call	0x96c	; 0x96c <SPI_ui8TransmitRecive>
		//ALL Messages are defined in STD_messages.h
		switch (request)
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	71 97       	sbiw	r30, 0x11	; 17
 164:	e0 33       	cpi	r30, 0x30	; 48
 166:	f1 05       	cpc	r31, r1
 168:	b8 f7       	brcc	.-18     	; 0x158 <main+0x3e>
 16a:	e6 5d       	subi	r30, 0xD6	; 214
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	0c 94 b0 04 	jmp	0x960	; 0x960 <__tablejump2__>
		{
			//STATUS COMMANDS
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
 172:	64 e0       	ldi	r22, 0x04	; 4
 174:	84 e4       	ldi	r24, 0x44	; 68
 176:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 17a:	88 23       	and	r24, r24
 17c:	39 f0       	breq	.+14     	; 0x18c <main+0x72>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
 17e:	64 e0       	ldi	r22, 0x04	; 4
 180:	84 e4       	ldi	r24, 0x44	; 68
 182:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	21 f4       	brne	.+8      	; 0x192 <main+0x78>
 18a:	02 c0       	rjmp	.+4      	; 0x190 <main+0x76>
			//STATUS COMMANDS
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 18c:	c0 e0       	ldi	r28, 0x00	; 0
 18e:	01 c0       	rjmp	.+2      	; 0x192 <main+0x78>
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 190:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 192:	8c 2f       	mov	r24, r28
 194:	0e 94 b6 04 	call	0x96c	; 0x96c <SPI_ui8TransmitRecive>
			break;//break the switch case
 198:	df cf       	rjmp	.-66     	; 0x158 <main+0x3e>
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
 19a:	65 e0       	ldi	r22, 0x05	; 5
 19c:	84 e4       	ldi	r24, 0x44	; 68
 19e:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 1a2:	88 23       	and	r24, r24
 1a4:	39 f0       	breq	.+14     	; 0x1b4 <main+0x9a>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
 1a6:	65 e0       	ldi	r22, 0x05	; 5
 1a8:	84 e4       	ldi	r24, 0x44	; 68
 1aa:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	21 f4       	brne	.+8      	; 0x1ba <main+0xa0>
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <main+0x9e>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <main+0xa0>
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 1b8:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 1ba:	8c 2f       	mov	r24, r28
 1bc:	0e 94 b6 04 	call	0x96c	; 0x96c <SPI_ui8TransmitRecive>
			break;//break the switch case
 1c0:	cb cf       	rjmp	.-106    	; 0x158 <main+0x3e>
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
 1c2:	66 e0       	ldi	r22, 0x06	; 6
 1c4:	84 e4       	ldi	r24, 0x44	; 68
 1c6:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 1ca:	88 23       	and	r24, r24
 1cc:	39 f0       	breq	.+14     	; 0x1dc <main+0xc2>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
 1ce:	66 e0       	ldi	r22, 0x06	; 6
 1d0:	84 e4       	ldi	r24, 0x44	; 68
 1d2:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	21 f4       	brne	.+8      	; 0x1e2 <main+0xc8>
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <main+0xc6>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <main+0xc8>
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 1e0:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 b6 04 	call	0x96c	; 0x96c <SPI_ui8TransmitRecive>
			break;//break the switch case
 1e8:	b7 cf       	rjmp	.-146    	; 0x158 <main+0x3e>
			case ROOM4_STATUS:
			if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==0)//if the led is turned off
 1ea:	67 e0       	ldi	r22, 0x07	; 7
 1ec:	84 e4       	ldi	r24, 0x44	; 68
 1ee:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 1f2:	88 23       	and	r24, r24
 1f4:	39 f0       	breq	.+14     	; 0x204 <main+0xea>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==1)//if the led is turned on
 1f6:	67 e0       	ldi	r22, 0x07	; 7
 1f8:	84 e4       	ldi	r24, 0x44	; 68
 1fa:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	21 f4       	brne	.+8      	; 0x20a <main+0xf0>
 202:	02 c0       	rjmp	.+4      	; 0x208 <main+0xee>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM4_STATUS:
			if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	01 c0       	rjmp	.+2      	; 0x20a <main+0xf0>
			}
			else if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 208:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 20a:	8c 2f       	mov	r24, r28
 20c:	0e 94 b6 04 	call	0x96c	; 0x96c <SPI_ui8TransmitRecive>
			break;//break the switch case
 210:	a3 cf       	rjmp	.-186    	; 0x158 <main+0x3e>
			case AIR_COND_STATUS:
			if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==0)//if the led is turned off
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	84 e4       	ldi	r24, 0x44	; 68
 216:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 21a:	88 23       	and	r24, r24
 21c:	39 f0       	breq	.+14     	; 0x22c <main+0x112>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==1)//if the led is turned on
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	84 e4       	ldi	r24, 0x44	; 68
 222:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	21 f4       	brne	.+8      	; 0x232 <main+0x118>
 22a:	02 c0       	rjmp	.+4      	; 0x230 <main+0x116>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case AIR_COND_STATUS:
			if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	01 c0       	rjmp	.+2      	; 0x232 <main+0x118>
			}
			else if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 230:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 232:	8c 2f       	mov	r24, r28
 234:	0e 94 b6 04 	call	0x96c	; 0x96c <SPI_ui8TransmitRecive>
			break;
 238:	8f cf       	rjmp	.-226    	; 0x158 <main+0x3e>
			case TV_STATUS:
			if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
 23a:	63 e0       	ldi	r22, 0x03	; 3
 23c:	84 e4       	ldi	r24, 0x44	; 68
 23e:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 242:	88 23       	and	r24, r24
 244:	39 f0       	breq	.+14     	; 0x254 <main+0x13a>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
 246:	63 e0       	ldi	r22, 0x03	; 3
 248:	84 e4       	ldi	r24, 0x44	; 68
 24a:	0e 94 cb 04 	call	0x996	; 0x996 <LED_u8ReadStatus>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	21 f4       	brne	.+8      	; 0x25a <main+0x140>
 252:	02 c0       	rjmp	.+4      	; 0x258 <main+0x13e>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;
			case TV_STATUS:
			if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 254:	c0 e0       	ldi	r28, 0x00	; 0
 256:	01 c0       	rjmp	.+2      	; 0x25a <main+0x140>
			}
			else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 258:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 25a:	8c 2f       	mov	r24, r28
 25c:	0e 94 b6 04 	call	0x96c	; 0x96c <SPI_ui8TransmitRecive>
			break;//break the switch case
 260:	7b cf       	rjmp	.-266    	; 0x158 <main+0x3e>
			
			//TURN ON COMMANDS
			case ROOM1_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM1_PIN);//turn on the led of room 1
 262:	64 e0       	ldi	r22, 0x04	; 4
 264:	84 e4       	ldi	r24, 0x44	; 68
 266:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_vTurnOn>
			break;//break the switch case
 26a:	76 cf       	rjmp	.-276    	; 0x158 <main+0x3e>
			case ROOM2_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM2_PIN);//turn on the led of room 2
 26c:	65 e0       	ldi	r22, 0x05	; 5
 26e:	84 e4       	ldi	r24, 0x44	; 68
 270:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_vTurnOn>
			break;//break the switch case
 274:	71 cf       	rjmp	.-286    	; 0x158 <main+0x3e>
			case ROOM3_TURN_ON:
			LED_vTurnOn(ROOM3_PORT,ROOM3_PIN);//turn on the led of room 3
 276:	66 e0       	ldi	r22, 0x06	; 6
 278:	84 e4       	ldi	r24, 0x44	; 68
 27a:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_vTurnOn>
			break;//break the switch case
 27e:	6c cf       	rjmp	.-296    	; 0x158 <main+0x3e>
			case ROOM4_TURN_ON:
			LED_vTurnOn(ROOM4_PORT,ROOM4_PIN);//turn on the led of room 4
 280:	67 e0       	ldi	r22, 0x07	; 7
 282:	84 e4       	ldi	r24, 0x44	; 68
 284:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_vTurnOn>
			break;//break the switch case
 288:	67 cf       	rjmp	.-306    	; 0x158 <main+0x3e>
			case AIR_COND_TURN_ON:
			timer0_initializeCTC();
 28a:	0e 94 33 04 	call	0x866	; 0x866 <timer0_initializeCTC>
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of air conditioning
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	84 e4       	ldi	r24, 0x44	; 68
 292:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_vTurnOn>
			break;//break the switch case
 296:	60 cf       	rjmp	.-320    	; 0x158 <main+0x3e>
			case TV_TURN_ON:
			LED_vTurnOn(TV_PORT,TV_PIN);//turn on the led of the TV
 298:	63 e0       	ldi	r22, 0x03	; 3
 29a:	84 e4       	ldi	r24, 0x44	; 68
 29c:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_vTurnOn>
			break;//break the switch case
 2a0:	5b cf       	rjmp	.-330    	; 0x158 <main+0x3e>
			
			//TURN OFF COMMANDS
			case ROOM1_TURN_OFF:
			LED_vTurnOff(ROOM1_PORT,ROOM1_PIN);//turn off the led of room 1
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	84 e4       	ldi	r24, 0x44	; 68
 2a6:	0e 94 c3 04 	call	0x986	; 0x986 <LED_vTurnOff>
			break;//break the switch case
 2aa:	56 cf       	rjmp	.-340    	; 0x158 <main+0x3e>
			case ROOM2_TURN_OFF:
			LED_vTurnOff(ROOM2_PORT,ROOM2_PIN);//turn off the led of room 2
 2ac:	65 e0       	ldi	r22, 0x05	; 5
 2ae:	84 e4       	ldi	r24, 0x44	; 68
 2b0:	0e 94 c3 04 	call	0x986	; 0x986 <LED_vTurnOff>
			break;//break the switch case
 2b4:	51 cf       	rjmp	.-350    	; 0x158 <main+0x3e>
			case ROOM3_TURN_OFF:
			LED_vTurnOff(ROOM3_PORT,ROOM3_PIN);//turn off the led of room 3
 2b6:	66 e0       	ldi	r22, 0x06	; 6
 2b8:	84 e4       	ldi	r24, 0x44	; 68
 2ba:	0e 94 c3 04 	call	0x986	; 0x986 <LED_vTurnOff>
			break;//break the switch case
 2be:	4c cf       	rjmp	.-360    	; 0x158 <main+0x3e>
			case ROOM4_TURN_OFF:
			LED_vTurnOff(ROOM4_PORT,ROOM4_PIN);//turn off the led of room 4
 2c0:	67 e0       	ldi	r22, 0x07	; 7
 2c2:	84 e4       	ldi	r24, 0x44	; 68
 2c4:	0e 94 c3 04 	call	0x986	; 0x986 <LED_vTurnOff>
			break;//break the switch case
 2c8:	47 cf       	rjmp	.-370    	; 0x158 <main+0x3e>
			case AIR_COND_TURN_OFF:
			timer0_stop();
 2ca:	0e 94 84 04 	call	0x908	; 0x908 <timer0_stop>
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of air conditioning
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	84 e4       	ldi	r24, 0x44	; 68
 2d2:	0e 94 c3 04 	call	0x986	; 0x986 <LED_vTurnOff>
			break;//break the switch case
 2d6:	40 cf       	rjmp	.-384    	; 0x158 <main+0x3e>
			case TV_TURN_OFF:
			LED_vTurnOff(TV_PORT,TV_PIN);//turn off the led of the TV
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	84 e4       	ldi	r24, 0x44	; 68
 2dc:	0e 94 c3 04 	call	0x986	; 0x986 <LED_vTurnOff>
			break;//break the switch case
 2e0:	3b cf       	rjmp	.-394    	; 0x158 <main+0x3e>
			
			//Set temperature 
			case SET_TEMPERATURE:
			required_temperature = SPI_ui8TransmitRecive(DEFAULT_ACK);//get the temperature from the master and store the temperature in required temperature
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	0e 94 b6 04 	call	0x96c	; 0x96c <SPI_ui8TransmitRecive>
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <required_temperature+0x1>
 2ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <required_temperature>
			break;//break the switch case
 2f2:	32 cf       	rjmp	.-412    	; 0x158 <main+0x3e>

Disassembly of section .text.__vector_10:

000002f4 <__vector_10>:
		}
	}
}

ISR(TIMER0_COMP_vect)
{
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	counter++;//count the ticks of the timer zero
 316:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <counter>
 31a:	8f 5f       	subi	r24, 0xFF	; 255
 31c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <counter>
	if(counter>=10)//do that code every 10 ticks
 320:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <counter>
 324:	8a 30       	cpi	r24, 0x0A	; 10
 326:	08 f4       	brcc	.+2      	; 0x32a <__vector_10+0x36>
 328:	58 c0       	rjmp	.+176    	; 0x3da <__vector_10+0xe6>
	{
		counter=0;//clear the counter of ticks
 32a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counter>
		temp_sensor_reading=(0.25*ADC_u16Read());//read the temperature from the temperature sensor connected to the ADC of the micro controller
 32e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <ADC_u16Read>
 332:	bc 01       	movw	r22, r24
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 a5 03 	call	0x74a	; 0x74a <__floatunsisf>
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 e8       	ldi	r20, 0x80	; 128
 342:	5e e3       	ldi	r21, 0x3E	; 62
 344:	0e 94 c7 04 	call	0x98e	; 0x98e <__mulsf3>
 348:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fixunssfsi>
 34c:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <_edata+0x1>
 350:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <_edata>
		if (temp_sensor_reading>=(required_temperature+1))//do that code if the read temperature if greater than required temperature by one or more
 354:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <required_temperature>
 358:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <required_temperature+0x1>
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 362:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
 366:	28 17       	cp	r18, r24
 368:	39 07       	cpc	r19, r25
 36a:	40 f0       	brcs	.+16     	; 0x37c <__vector_10+0x88>
		{
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of the air conditioning
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	84 e4       	ldi	r24, 0x44	; 68
 370:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_vTurnOn>
			last_air_conditioning_value=AIR_CONDTIONING_ON;//save the value of the state of the air conditioning
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <last_air_conditioning_value>
 37a:	2f c0       	rjmp	.+94     	; 0x3da <__vector_10+0xe6>
		}
		else if (temp_sensor_reading<=(required_temperature-1))//do that code if the read temperature if lesser than required temperature by one or more
 37c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <required_temperature>
 380:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <required_temperature+0x1>
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 38a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
 38e:	82 17       	cp	r24, r18
 390:	93 07       	cpc	r25, r19
 392:	38 f0       	brcs	.+14     	; 0x3a2 <__vector_10+0xae>
		{
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of the air conditioning
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	84 e4       	ldi	r24, 0x44	; 68
 398:	0e 94 c3 04 	call	0x986	; 0x986 <LED_vTurnOff>
			last_air_conditioning_value=AIR_CONDTIONING_OFF;//save the value of the state of the air conditioning
 39c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <last_air_conditioning_value>
 3a0:	1c c0       	rjmp	.+56     	; 0x3da <__vector_10+0xe6>
		}
		else if (required_temperature==temp_sensor_reading)//do that code if the read temperature is equal to the required temperature
 3a2:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <required_temperature>
 3a6:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <required_temperature+0x1>
 3aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 3ae:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 3b2:	28 17       	cp	r18, r24
 3b4:	39 07       	cpc	r19, r25
 3b6:	89 f4       	brne	.+34     	; 0x3da <__vector_10+0xe6>
		{
			if (last_air_conditioning_value==AIR_CONDTIONING_ON)//in the case of the last saved status of the air conditioning was on
 3b8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <last_air_conditioning_value>
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	29 f4       	brne	.+10     	; 0x3ca <__vector_10+0xd6>
			{
				LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of the air conditioning
 3c0:	62 e0       	ldi	r22, 0x02	; 2
 3c2:	84 e4       	ldi	r24, 0x44	; 68
 3c4:	0e 94 bf 04 	call	0x97e	; 0x97e <LED_vTurnOn>
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <__vector_10+0xe6>
			}
			else if (last_air_conditioning_value==AIR_CONDTIONING_OFF)//in the case of the last saved status of the air conditioning was off
 3ca:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <last_air_conditioning_value>
 3ce:	81 11       	cpse	r24, r1
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <__vector_10+0xe6>
			{
				LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of the air conditioning
 3d2:	62 e0       	ldi	r22, 0x02	; 2
 3d4:	84 e4       	ldi	r24, 0x44	; 68
 3d6:	0e 94 c3 04 	call	0x986	; 0x986 <LED_vTurnOff>
			}
		}
	}
}
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

Disassembly of section .text.SPI_vInitSlave:

0000091c <SPI_vInitSlave>:
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
 91c:	87 b3       	in	r24, 0x17	; 23
 91e:	80 64       	ori	r24, 0x40	; 64
 920:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE);//Enable the SPI
 922:	8d b1       	in	r24, 0x0d	; 13
 924:	80 64       	ori	r24, 0x40	; 64
 926:	8d b9       	out	0x0d, r24	; 13
 928:	08 95       	ret

Disassembly of section .text.SPI_ui8TransmitRecive:

0000096c <SPI_ui8TransmitRecive>:
}

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
 96c:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
 96e:	77 9b       	sbis	0x0e, 7	; 14
 970:	fe cf       	rjmp	.-4      	; 0x96e <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
 972:	8f b1       	in	r24, 0x0f	; 15
 974:	08 95       	ret

Disassembly of section .text.timer0_initializeCTC:

00000866 <timer0_initializeCTC>:

void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
 866:	8e e4       	ldi	r24, 0x4E	; 78
 868:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
 86a:	83 b7       	in	r24, 0x33	; 51
 86c:	88 60       	ori	r24, 0x08	; 8
 86e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
 870:	83 b7       	in	r24, 0x33	; 51
 872:	8f 7b       	andi	r24, 0xBF	; 191
 874:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
 876:	83 b7       	in	r24, 0x33	; 51
 878:	81 60       	ori	r24, 0x01	; 1
 87a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 87c:	83 b7       	in	r24, 0x33	; 51
 87e:	8d 7f       	andi	r24, 0xFD	; 253
 880:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 882:	83 b7       	in	r24, 0x33	; 51
 884:	84 60       	ori	r24, 0x04	; 4
 886:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 888:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
 88a:	89 b7       	in	r24, 0x39	; 57
 88c:	82 60       	ori	r24, 0x02	; 2
 88e:	89 bf       	out	0x39, r24	; 57
 890:	08 95       	ret

Disassembly of section .text.timer0_stop:

00000908 <timer0_stop>:
}

void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
 908:	83 b7       	in	r24, 0x33	; 51
 90a:	8e 7f       	andi	r24, 0xFE	; 254
 90c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 90e:	83 b7       	in	r24, 0x33	; 51
 910:	8d 7f       	andi	r24, 0xFD	; 253
 912:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
 914:	83 b7       	in	r24, 0x33	; 51
 916:	8b 7f       	andi	r24, 0xFB	; 251
 918:	83 bf       	out	0x33, r24	; 51
 91a:	08 95       	ret

Disassembly of section .text:

000007c4 <__fixunssfsi>:
 7c4:	0e 94 19 04 	call	0x832	; 0x832 <__fp_splitA>
 7c8:	88 f0       	brcs	.+34     	; 0x7ec <__fixunssfsi+0x28>
 7ca:	9f 57       	subi	r25, 0x7F	; 127
 7cc:	98 f0       	brcs	.+38     	; 0x7f4 <__fixunssfsi+0x30>
 7ce:	b9 2f       	mov	r27, r25
 7d0:	99 27       	eor	r25, r25
 7d2:	b7 51       	subi	r27, 0x17	; 23
 7d4:	b0 f0       	brcs	.+44     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7d6:	e1 f0       	breq	.+56     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7d8:	66 0f       	add	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	88 1f       	adc	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	1a f0       	brmi	.+6      	; 0x7e8 <__fixunssfsi+0x24>
 7e2:	ba 95       	dec	r27
 7e4:	c9 f7       	brne	.-14     	; 0x7d8 <__fixunssfsi+0x14>
 7e6:	14 c0       	rjmp	.+40     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7e8:	b1 30       	cpi	r27, 0x01	; 1
 7ea:	91 f0       	breq	.+36     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7ec:	0e 94 a3 04 	call	0x946	; 0x946 <__fp_zero>
 7f0:	b1 e0       	ldi	r27, 0x01	; 1
 7f2:	08 95       	ret
 7f4:	0c 94 a3 04 	jmp	0x946	; 0x946 <__fp_zero>
 7f8:	67 2f       	mov	r22, r23
 7fa:	78 2f       	mov	r23, r24
 7fc:	88 27       	eor	r24, r24
 7fe:	b8 5f       	subi	r27, 0xF8	; 248
 800:	39 f0       	breq	.+14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 802:	b9 3f       	cpi	r27, 0xF9	; 249
 804:	cc f3       	brlt	.-14     	; 0x7f8 <__fixunssfsi+0x34>
 806:	86 95       	lsr	r24
 808:	77 95       	ror	r23
 80a:	67 95       	ror	r22
 80c:	b3 95       	inc	r27
 80e:	d9 f7       	brne	.-10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 810:	3e f4       	brtc	.+14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 812:	90 95       	com	r25
 814:	80 95       	com	r24
 816:	70 95       	com	r23
 818:	61 95       	neg	r22
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	08 95       	ret

Disassembly of section .text:

0000074a <__floatunsisf>:
 74a:	e8 94       	clt
 74c:	09 c0       	rjmp	.+18     	; 0x760 <__floatsisf+0x12>

0000074e <__floatsisf>:
 74e:	97 fb       	bst	r25, 7
 750:	3e f4       	brtc	.+14     	; 0x760 <__floatsisf+0x12>
 752:	90 95       	com	r25
 754:	80 95       	com	r24
 756:	70 95       	com	r23
 758:	61 95       	neg	r22
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	99 23       	and	r25, r25
 762:	a9 f0       	breq	.+42     	; 0x78e <__floatsisf+0x40>
 764:	f9 2f       	mov	r31, r25
 766:	96 e9       	ldi	r25, 0x96	; 150
 768:	bb 27       	eor	r27, r27
 76a:	93 95       	inc	r25
 76c:	f6 95       	lsr	r31
 76e:	87 95       	ror	r24
 770:	77 95       	ror	r23
 772:	67 95       	ror	r22
 774:	b7 95       	ror	r27
 776:	f1 11       	cpse	r31, r1
 778:	f8 cf       	rjmp	.-16     	; 0x76a <__floatsisf+0x1c>
 77a:	fa f4       	brpl	.+62     	; 0x7ba <__floatsisf+0x6c>
 77c:	bb 0f       	add	r27, r27
 77e:	11 f4       	brne	.+4      	; 0x784 <__floatsisf+0x36>
 780:	60 ff       	sbrs	r22, 0
 782:	1b c0       	rjmp	.+54     	; 0x7ba <__floatsisf+0x6c>
 784:	6f 5f       	subi	r22, 0xFF	; 255
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	16 c0       	rjmp	.+44     	; 0x7ba <__floatsisf+0x6c>
 78e:	88 23       	and	r24, r24
 790:	11 f0       	breq	.+4      	; 0x796 <__floatsisf+0x48>
 792:	96 e9       	ldi	r25, 0x96	; 150
 794:	11 c0       	rjmp	.+34     	; 0x7b8 <__floatsisf+0x6a>
 796:	77 23       	and	r23, r23
 798:	21 f0       	breq	.+8      	; 0x7a2 <__floatsisf+0x54>
 79a:	9e e8       	ldi	r25, 0x8E	; 142
 79c:	87 2f       	mov	r24, r23
 79e:	76 2f       	mov	r23, r22
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <__floatsisf+0x5e>
 7a2:	66 23       	and	r22, r22
 7a4:	71 f0       	breq	.+28     	; 0x7c2 <__floatsisf+0x74>
 7a6:	96 e8       	ldi	r25, 0x86	; 134
 7a8:	86 2f       	mov	r24, r22
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	2a f0       	brmi	.+10     	; 0x7ba <__floatsisf+0x6c>
 7b0:	9a 95       	dec	r25
 7b2:	66 0f       	add	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	88 1f       	adc	r24, r24
 7b8:	da f7       	brpl	.-10     	; 0x7b0 <__floatsisf+0x62>
 7ba:	88 0f       	add	r24, r24
 7bc:	96 95       	lsr	r25
 7be:	87 95       	ror	r24
 7c0:	97 f9       	bld	r25, 7
 7c2:	08 95       	ret

Disassembly of section .text:

00000954 <__fp_inf>:
 954:	97 f9       	bld	r25, 7
 956:	9f 67       	ori	r25, 0x7F	; 127
 958:	80 e8       	ldi	r24, 0x80	; 128
 95a:	70 e0       	ldi	r23, 0x00	; 0
 95c:	60 e0       	ldi	r22, 0x00	; 0
 95e:	08 95       	ret

Disassembly of section .text:

0000099c <__fp_nan>:
 99c:	9f ef       	ldi	r25, 0xFF	; 255
 99e:	80 ec       	ldi	r24, 0xC0	; 192
 9a0:	08 95       	ret

Disassembly of section .text:

0000092a <__fp_pscA>:
 92a:	00 24       	eor	r0, r0
 92c:	0a 94       	dec	r0
 92e:	16 16       	cp	r1, r22
 930:	17 06       	cpc	r1, r23
 932:	18 06       	cpc	r1, r24
 934:	09 06       	cpc	r0, r25
 936:	08 95       	ret

Disassembly of section .text:

00000938 <__fp_pscB>:
 938:	00 24       	eor	r0, r0
 93a:	0a 94       	dec	r0
 93c:	12 16       	cp	r1, r18
 93e:	13 06       	cpc	r1, r19
 940:	14 06       	cpc	r1, r20
 942:	05 06       	cpc	r0, r21
 944:	08 95       	ret

Disassembly of section .text:

00000892 <__fp_round>:
 892:	09 2e       	mov	r0, r25
 894:	03 94       	inc	r0
 896:	00 0c       	add	r0, r0
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0xc>
 89a:	88 23       	and	r24, r24
 89c:	52 f0       	brmi	.+20     	; 0x8b2 <__fp_round+0x20>
 89e:	bb 0f       	add	r27, r27
 8a0:	40 f4       	brcc	.+16     	; 0x8b2 <__fp_round+0x20>
 8a2:	bf 2b       	or	r27, r31
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__fp_round+0x18>
 8a6:	60 ff       	sbrs	r22, 0
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__fp_round+0x20>
 8aa:	6f 5f       	subi	r22, 0xFF	; 255
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	08 95       	ret

Disassembly of section .text:

00000822 <__fp_split3>:
 822:	57 fd       	sbrc	r21, 7
 824:	90 58       	subi	r25, 0x80	; 128
 826:	44 0f       	add	r20, r20
 828:	55 1f       	adc	r21, r21
 82a:	59 f0       	breq	.+22     	; 0x842 <__fp_splitA+0x10>
 82c:	5f 3f       	cpi	r21, 0xFF	; 255
 82e:	71 f0       	breq	.+28     	; 0x84c <__fp_splitA+0x1a>
 830:	47 95       	ror	r20

00000832 <__fp_splitA>:
 832:	88 0f       	add	r24, r24
 834:	97 fb       	bst	r25, 7
 836:	99 1f       	adc	r25, r25
 838:	61 f0       	breq	.+24     	; 0x852 <__fp_splitA+0x20>
 83a:	9f 3f       	cpi	r25, 0xFF	; 255
 83c:	79 f0       	breq	.+30     	; 0x85c <__fp_splitA+0x2a>
 83e:	87 95       	ror	r24
 840:	08 95       	ret
 842:	12 16       	cp	r1, r18
 844:	13 06       	cpc	r1, r19
 846:	14 06       	cpc	r1, r20
 848:	55 1f       	adc	r21, r21
 84a:	f2 cf       	rjmp	.-28     	; 0x830 <__fp_split3+0xe>
 84c:	46 95       	lsr	r20
 84e:	f1 df       	rcall	.-30     	; 0x832 <__fp_splitA>
 850:	08 c0       	rjmp	.+16     	; 0x862 <__stack+0x3>
 852:	16 16       	cp	r1, r22
 854:	17 06       	cpc	r1, r23
 856:	18 06       	cpc	r1, r24
 858:	99 1f       	adc	r25, r25
 85a:	f1 cf       	rjmp	.-30     	; 0x83e <__fp_splitA+0xc>
 85c:	86 95       	lsr	r24
 85e:	71 05       	cpc	r23, r1
 860:	61 05       	cpc	r22, r1
 862:	08 94       	sec
 864:	08 95       	ret

Disassembly of section .text:

00000946 <__fp_zero>:
 946:	e8 94       	clt

00000948 <__fp_szero>:
 948:	bb 27       	eor	r27, r27
 94a:	66 27       	eor	r22, r22
 94c:	77 27       	eor	r23, r23
 94e:	cb 01       	movw	r24, r22
 950:	97 f9       	bld	r25, 7
 952:	08 95       	ret

Disassembly of section .text:

0000098e <__mulsf3>:
 98e:	0e 94 de 02 	call	0x5bc	; 0x5bc <__mulsf3x>
 992:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_round>

Disassembly of section .text:

000005bc <__mulsf3x>:
 5bc:	0f c0       	rjmp	.+30     	; 0x5dc <__mulsf3x+0x20>
 5be:	0e 94 95 04 	call	0x92a	; 0x92a <__fp_pscA>
 5c2:	38 f0       	brcs	.+14     	; 0x5d2 <__mulsf3x+0x16>
 5c4:	0e 94 9c 04 	call	0x938	; 0x938 <__fp_pscB>
 5c8:	20 f0       	brcs	.+8      	; 0x5d2 <__mulsf3x+0x16>
 5ca:	95 23       	and	r25, r21
 5cc:	11 f0       	breq	.+4      	; 0x5d2 <__mulsf3x+0x16>
 5ce:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_inf>
 5d2:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_nan>
 5d6:	11 24       	eor	r1, r1
 5d8:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_szero>
 5dc:	0e 94 11 04 	call	0x822	; 0x822 <__fp_split3>
 5e0:	70 f3       	brcs	.-36     	; 0x5be <__mulsf3x+0x2>

000005e2 <__mulsf3_pse>:
 5e2:	95 9f       	mul	r25, r21
 5e4:	c1 f3       	breq	.-16     	; 0x5d6 <__mulsf3x+0x1a>
 5e6:	95 0f       	add	r25, r21
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	55 1f       	adc	r21, r21
 5ec:	62 9f       	mul	r22, r18
 5ee:	f0 01       	movw	r30, r0
 5f0:	72 9f       	mul	r23, r18
 5f2:	bb 27       	eor	r27, r27
 5f4:	f0 0d       	add	r31, r0
 5f6:	b1 1d       	adc	r27, r1
 5f8:	63 9f       	mul	r22, r19
 5fa:	aa 27       	eor	r26, r26
 5fc:	f0 0d       	add	r31, r0
 5fe:	b1 1d       	adc	r27, r1
 600:	aa 1f       	adc	r26, r26
 602:	64 9f       	mul	r22, r20
 604:	66 27       	eor	r22, r22
 606:	b0 0d       	add	r27, r0
 608:	a1 1d       	adc	r26, r1
 60a:	66 1f       	adc	r22, r22
 60c:	82 9f       	mul	r24, r18
 60e:	22 27       	eor	r18, r18
 610:	b0 0d       	add	r27, r0
 612:	a1 1d       	adc	r26, r1
 614:	62 1f       	adc	r22, r18
 616:	73 9f       	mul	r23, r19
 618:	b0 0d       	add	r27, r0
 61a:	a1 1d       	adc	r26, r1
 61c:	62 1f       	adc	r22, r18
 61e:	83 9f       	mul	r24, r19
 620:	a0 0d       	add	r26, r0
 622:	61 1d       	adc	r22, r1
 624:	22 1f       	adc	r18, r18
 626:	74 9f       	mul	r23, r20
 628:	33 27       	eor	r19, r19
 62a:	a0 0d       	add	r26, r0
 62c:	61 1d       	adc	r22, r1
 62e:	23 1f       	adc	r18, r19
 630:	84 9f       	mul	r24, r20
 632:	60 0d       	add	r22, r0
 634:	21 1d       	adc	r18, r1
 636:	82 2f       	mov	r24, r18
 638:	76 2f       	mov	r23, r22
 63a:	6a 2f       	mov	r22, r26
 63c:	11 24       	eor	r1, r1
 63e:	9f 57       	subi	r25, 0x7F	; 127
 640:	50 40       	sbci	r21, 0x00	; 0
 642:	9a f0       	brmi	.+38     	; 0x66a <__mulsf3_pse+0x88>
 644:	f1 f0       	breq	.+60     	; 0x682 <__mulsf3_pse+0xa0>
 646:	88 23       	and	r24, r24
 648:	4a f0       	brmi	.+18     	; 0x65c <__mulsf3_pse+0x7a>
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	bb 1f       	adc	r27, r27
 650:	66 1f       	adc	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	91 50       	subi	r25, 0x01	; 1
 658:	50 40       	sbci	r21, 0x00	; 0
 65a:	a9 f7       	brne	.-22     	; 0x646 <__mulsf3_pse+0x64>
 65c:	9e 3f       	cpi	r25, 0xFE	; 254
 65e:	51 05       	cpc	r21, r1
 660:	80 f0       	brcs	.+32     	; 0x682 <__mulsf3_pse+0xa0>
 662:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_inf>
 666:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_szero>
 66a:	5f 3f       	cpi	r21, 0xFF	; 255
 66c:	e4 f3       	brlt	.-8      	; 0x666 <__mulsf3_pse+0x84>
 66e:	98 3e       	cpi	r25, 0xE8	; 232
 670:	d4 f3       	brlt	.-12     	; 0x666 <__mulsf3_pse+0x84>
 672:	86 95       	lsr	r24
 674:	77 95       	ror	r23
 676:	67 95       	ror	r22
 678:	b7 95       	ror	r27
 67a:	f7 95       	ror	r31
 67c:	e7 95       	ror	r30
 67e:	9f 5f       	subi	r25, 0xFF	; 255
 680:	c1 f7       	brne	.-16     	; 0x672 <__mulsf3_pse+0x90>
 682:	fe 2b       	or	r31, r30
 684:	88 0f       	add	r24, r24
 686:	91 1d       	adc	r25, r1
 688:	96 95       	lsr	r25
 68a:	87 95       	ror	r24
 68c:	97 f9       	bld	r25, 7
 68e:	08 95       	ret

Disassembly of section .text.libgcc:

00000960 <__tablejump2__>:
 960:	ee 0f       	add	r30, r30
 962:	ff 1f       	adc	r31, r31
 964:	05 90       	lpm	r0, Z+
 966:	f4 91       	lpm	r31, Z
 968:	e0 2d       	mov	r30, r0
 96a:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000009aa <_fini>:
 9aa:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000009ac <__funcs_on_exit>:
 9ac:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000009ae <__simulator_exit>:
 9ae:	08 95       	ret

Disassembly of section .text.exit:

000008f2 <exit>:
 8f2:	ec 01       	movw	r28, r24
 8f4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__funcs_on_exit>
 8f8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_fini>
 8fc:	ce 01       	movw	r24, r28
 8fe:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__simulator_exit>
 902:	ce 01       	movw	r24, r28
 904:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_Exit>

Disassembly of section .text._Exit:

000009a6 <_Exit>:
 9a6:	0e 94 8b 00 	call	0x116	; 0x116 <_exit>
